import React, { createContext, useContext, useState } from 'react'

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —é–∑–µ—Ä—É
interface IUser {
    accessToken: string;
    email: string;
    firstName: string;
    gender: string;
    id: number;
    image: string;
    lastName: string;
    refreshToken: string;
    username: string;
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–µ–π—Ç
export const initialUser: IUser = {
    accessToken: '',
    email: '',
    firstName: '',
    gender: '',
    id: 0,
    image: '',
    lastName: '',
    refreshToken: '',
    username: ''
};

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–µ–π—Ç –ø–æ —é–∑–µ—Ä—É
interface IAuthContextType {
    user: IUser;
    setUser: React.Dispatch<React.SetStateAction<IUser>>;
    // isLoading: boolean;
    // setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;
  }

export const AuthContext = createContext<IAuthContextType | undefined> (undefined);

// –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –ø–æ–æ–º—â—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const AuthProvider = ({ children }: { children: React.ReactNode; }) => {

    // 1. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    const [user, setUser] = useState<IUser>(initialUser);
    // !!! –≠—Ç–æ—Ç —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ—Ö –∫–æ–ø–º–æ–Ω–µ–Ω—Ç–æ–≤

  return (

        <AuthContext.Provider value={{ user, setUser }}>
      {/* –∑–∞ –º–µ—Å—Ç–æ —á–∏–ª–¥—Ä–Ω–µ –ø—Ä–∏–¥—É—Ç –æ–±–µ—Ä–Ω—É—Ç—ã–µ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã*/}
      {children}
    </AuthContext.Provider>

  )
};

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
      throw new Error('no such context! üòµ');
    }
    return context;
  };
