import React, { useEffect, useState } from 'react'
import MyButton from '../../components/myButton/myButton'
import styles from './lesson10.module.css'
import Loader from '../../components/loader/Loader'
import cn from 'classnames'

interface ICatData {
    fact: string
    length: number
}

export default function Lesson10():JSX.Element {

    // –ü–†–ê–í–ö–ê: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Ö—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π -> –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    // const[catFact, setCatFact] = useState<string>('')
    const [catFacts, setCatFacts] = useState<string[]>([]);

    const [loading, setLoading] = useState<boolean>(true)

    const fetchCatFact = async ():Promise<void> => {
        const res = await fetch('https://catfact.ninja/fact')
        const data: ICatData = await res.json()
        console.log(data)

        // –ü–†–ê–í–ö–ê: –†–∞–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π -> –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –º–∞—Å—Å–∏–≤ + –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ***, –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –±–æ–ª—å—à–µ 1-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        // setCatFacts(data.fact)
        setCatFacts((prevFacts) => 
            prevFacts.length > 0 
                ? [...prevFacts, "***", data.fact]
                : [...prevFacts, data.fact]
        );

        setLoading(false)
    }
    
    const handleGetCatFact = () => {
        setLoading(true)
        setTimeout(() => {
            fetchCatFact()
        }, 250)
    }

    useEffect(() => {
        fetchCatFact()
    }, [])

    const clearCatFacts = () => {
        setCatFacts([]);
    };

    return (
        <div className='lesson-container'>
            <h2>Lesson 10. Cat facts üêàüêà‚Äç‚¨õ</h2>
            <div className={styles.buttons}>
                <MyButton func={handleGetCatFact} text='GET MORE INFO' isDanger={false}/>

                {/* –£–î–ê–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ò –î–ê–ù–ù–´–• –í –ú–ê–°–°–ò–í–ï */}
                {catFacts.length > 0 && (
                <MyButton func={clearCatFacts} text='DELETE ALL DATA' isDanger={true}/>
            )}
            </div>

            {loading ? <Loader/> : (
            <div className={cn(styles.catWrapper, {[styles.clearBackGround]:catFacts.length === 0})} 
            >
                <div className={styles.content}>

                    {/* –ü–†–ê–í–ö–ê: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º -> –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ñ–∞–∫—Ç–æ–≤ */}
                    {/* <p>{catFacts}</p> */}
                    {catFacts.map((fact, index) => (
                    <p key={index}>{fact}</p>
                    ))}
                    
                </div>
            </div>
            )}
        </div>
    )
    }
